package ClimbingStairs;

import java.util.*;
import java.awt.geom.Path2D;
import java.lang.*;


//Definition for a point.
 class Point {
      int x;
      int y;
      Point() { x = 0; y = 0; }
      Point(int a, int b) { x = a; y = b; }
 }
 

public class Solution {
	public int climbStairs(int n) {
        int intArray[] = new int[n];
        int i;
        for(i = 0; i < n; i++)
        {
        	if(i <= 1)
        	{
        	  intArray[i] = i + 1;
        	}
        	else
        	{
        	  intArray[i] = intArray[i - 1] + intArray[i - 2];
        	}
        }
		return intArray[n-1];
	}
    
	public int searchInsert(int[] A, int target) {
		int min = 0;
		int high = A.length - 1;
		while(min < high)
		{
			int mid = (min + high) / 2;
			if(A[mid] == target) return mid;
			else if(A[mid] < target) 		
				min = mid + 1;
			else high = mid - 1;
		}
		if(target > A[min]) return min + 1;
		return min;
    }	
	
	 
	public String getPermutation(int n, int k) {
		String ret = "";
		int[] data = new int[10];
		int[] sign = new int[10];
		
		int i, j;
		for(i = 0; i < 10; i++) sign[i] = 0;
		
		data[0] = data[1] = 1;
		for(i = 2; i <= n; i++) data[i] = data[i - 1]*i;
		
		i -= 2;
		--k;
		while (i >= 0)
		{
			int tmp = k / data[i];
			for(j = 1; j < 10; j++)
			{
				if(sign[j] == 0) tmp--;
				if(tmp < 0) break;
			}
			sign[j] = 1;
			ret += (j + "");
			k %= data[i];
			i--;
		}
		return ret;
	}
	
    public int rob(int[] num) {
		int len = num.length;
		if(0 == len) return 0;
		if(len < 2)  return num[0];
		int[][] path = new int[len][2];
		path[0][0] = 0;
		path[0][1] = num[0];
		for(int i = 1; i < len; i++)
		{
			path[i][0] = path[i - 1][0]>path[i - 1][1]?path[i - 1][0]:path[i - 1][1];
			path[i][1] = path[i - 1][0] + num[i];
		}
		
		return path[len - 1][0] > path[len - 1][1] ? path[len - 1][0]:path[len - 1][1];
    }
    
   
     public int maxPoints(Point[] points) {
    	int n = points.length;
 
        int max = 0;
    	for(int i = 0; i < n; i++)
    	{
    		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
    		for(int j = i + 1; j < n; j++)
    		{
    			int rate = 0;
    			if(points[i].x != points[j].x) 
    				rate = (points[j].y - points[i].y)/(points[j].x - points[i].x);
    			else if(points[i].x == points[j].x) rate = 2147483647;
    			if(map.containsKey(rate))
    			{
    			    int val = map.get(rate);
    			    map.put(rate, ++val);
    			}
    			else {
    				map.put(rate, 2);
    			}
    		}
    		
    		int k;
    		for(k = 2; k < 2147483647; k++)
    		{
    			if(!map.containsValue(k)) break;
    			
    		}
    		if(val > max) max = val;
    	}
    
		return max;
     }
 
   

	public static void main(String[] args) {
		Solution s = new Solution();
		System.out.println("please input number of points: ");
		//int A[] = {1, 3, 5, 6};
		Scanner in=new Scanner(System.in);
		int n = in.nextInt();
//		int k = in.nextInt();
		//int ret = s.searchInsert(A, n);
//		String ret = s.getPermutation(n, k);
		Point[] point = new Point[n];
		for(int i=0; i < n; i++)
		{
			int a, b;
			a = in.nextInt();
			b = in.nextInt();
			point[i] = new Point(a, b);
		}
		
		int ret = s.maxPoints(point);
		System.out.println(ret);
	}
}
